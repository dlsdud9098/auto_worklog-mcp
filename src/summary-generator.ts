import { Config } from './config.js';
import { FileManager } from './file-manager.js';

export interface SummaryResult {
  date: string;
  content: string;
}

export class SummaryGenerator {
  private config: Config;
  private fileManager: FileManager;

  constructor(config: Config) {
    this.config = config;
    this.fileManager = new FileManager(config);
  }

  private getYesterday(): string {
    // 한국 시간 기준 어제
    const now = new Date();
    const kstOffset = 9 * 60; // KST는 UTC+9
    const utcTime = now.getTime() + (now.getTimezoneOffset() * 60000);
    const kstTime = new Date(utcTime + (kstOffset * 60000));
    kstTime.setDate(kstTime.getDate() - 1);
    return kstTime.toISOString().split('T')[0];
  }

  private getKSTTimestamp(): string {
    // 한국 시간으로 타임스탬프 생성
    const now = new Date();
    const kstOffset = 9 * 60; // KST는 UTC+9
    const utcTime = now.getTime() + (now.getTimezoneOffset() * 60000);
    const kstTime = new Date(utcTime + (kstOffset * 60000));
    return kstTime.toISOString().replace('Z', '+09:00');
  }

  async createSummary(date?: string, project?: string): Promise<SummaryResult> {
    const targetDate = date || this.getYesterday();
    const logs = await this.fileManager.getLogsForDate(targetDate, project);
    
    if (logs.length === 0) {
      return {
        date: targetDate,
        content: this.createEmptySummary(targetDate)
      };
    }
    
    const summary = await this.generateSummaryContent(logs, targetDate);
    
    return {
      date: targetDate,
      content: summary
    };
  }

  async createYesterdaySummary(project?: string): Promise<SummaryResult | null> {
    const yesterday = this.getYesterday();
    
    // 이미 어제 요약이 존재하는지 확인
    const summaryExists = await this.fileManager.summaryExists(yesterday);
    if (summaryExists) {
      console.log(`Summary for ${yesterday} already exists, skipping...`);
      return null;
    }
    
    const logs = await this.fileManager.getLogsForDate(yesterday, project);
    
    if (logs.length === 0) {
      console.log(`No logs found for ${yesterday}, skipping summary...`);
      return null;
    }
    
    console.log(`Creating summary for ${yesterday} with ${logs.length} logs...`);
    return this.createSummary(yesterday, project);
  }

  private async generateSummaryContent(logs: string[], date: string): Promise<string> {
    return this.generateBasicSummary(logs, date);
  }

  private generateBasicSummary(logs: string[], date: string): string {
    const summaries: string[] = [];
    
    for (const log of logs) {
      const summaryMatch = log.match(/^# (.+)$/m);
      const logNumberMatch = log.match(/Log Number: (\d{3})/);
      
      if (summaryMatch && logNumberMatch) {
        summaries.push(`- [${logNumberMatch[1]}] ${summaryMatch[1]}`);
      }
    }
    
    return `# Daily Summary - ${date}

Branch: ${this.config.gitBranch || 'main'}
Total Logs: ${logs.length}

## 작업 목록

${summaries.join('\n')}

## 상세 내용

이 요약은 자동으로 생성되었습니다.

---

*Generated by auto_worklog-mcp at ${this.getKSTTimestamp()}*`;
  }

  private createEmptySummary(date: string): string {
    return `# Daily Summary - ${date}

Branch: ${this.config.gitBranch || 'main'}
Total Logs: 0

## 작업 내역 없음

${date}에는 기록된 작업 로그가 없습니다.

---

*Generated by auto_worklog-mcp at ${this.getKSTTimestamp()}*`;
  }
}